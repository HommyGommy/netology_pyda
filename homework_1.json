{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Задание 1**. Даны 2 строки: *long_phrase* и *short_phrase*. \n",
    "Напишите код, который проверяет действительно ли длинная фраза *long_phrase* длиннее короткой *short_phrase*. И выводит *True* или *False* в зависимости от результата сравнения."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "long_phrase = 'Насколько проще было бы писать программы, если бы не заказчики'\n",
    "short_phrase = '640Кб должно хватить для любых задач. Билл Гейтс (по легенде)'\n",
    "\n",
    "if len(long_phrase) > len(short_phrase):\n",
    "    print('True')\n",
    "else:\n",
    "    print('False')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Задание 2**. Дано значение объема файла в байтах. Напишите перевод этого значения в мегабайты в формате: \"*Объем файла равен 213.68Mb*\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Укажите размер файла в байтах и будет чудо35000000\n",
      "Объем файла равен 33.38 Mb\n"
     ]
    }
   ],
   "source": [
    "initial_size = int(input('Укажите размер файла в байтах и будет чудо'))\n",
    "coeff = 1048576\n",
    "Mb_size = round(initial_size / coeff, 2)\n",
    "\n",
    "print('Объем файла равен', Mb_size,'Mb')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Задание 3**. Разработать приложение для определения знака зодиака по дате рождения. Пример:\n",
    "\n",
    "Введите месяц: март\n",
    "\n",
    "Введите число: 6\n",
    "\n",
    "Вывод:\n",
    "Рыбы"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Select monthJan\n",
      "Select datejan\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "invalid literal for int() with base 10: 'jan'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-61-d5b975126ae3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mmonth\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Select month'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdate\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Select date'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;31m#Jan\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mmonth\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'Jan'\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mdate\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m19\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: invalid literal for int() with base 10: 'jan'"
     ]
    }
   ],
   "source": [
    "month = input('Select month')\n",
    "date = int(input('Select date'))\n",
    "  \n",
    "    #Jan\n",
    "if month == 'Jan' and date <= 19:\n",
    "    print('Capriorn')\n",
    "elif month == 'Jan' and 31 > date > 19:\n",
    "    print('Aquarious')\n",
    "\n",
    "    #Feb   \n",
    "elif month == 'Feb' and date <= 20:\n",
    "    print('Aquariuos')\n",
    "elif month == 'Feb' and 31 > date > 20:\n",
    "    print('Pisces')\n",
    "\n",
    "    #Mar\n",
    "elif month == 'Mar' and date <= 20:\n",
    "    print('Pisces')\n",
    "elif month == 'Mar' and 31 > date > 20:\n",
    "    print('Aries')\n",
    "\n",
    "    #Apr\n",
    "elif month == 'Apr' and date <= 19:\n",
    "    print('Aries')\n",
    "elif month == 'Apr' and 31 > date > 19:\n",
    "    print('Taurus')\n",
    "\n",
    "    #May\n",
    "elif month == 'May' and date <= 20:\n",
    "    print('Taurus')\n",
    "elif month == 'May' and 31 > date > 20:\n",
    "    print('Gemini')\n",
    "\n",
    "    #June\n",
    "elif month == 'June' and date <= 20:\n",
    "    print('Gemini')\n",
    "elif month == 'June' and 31 > date > 20:\n",
    "    print('Cancer')\n",
    "\n",
    "    #July\n",
    "elif month == 'July' and date <= 22:\n",
    "    print('Cancer')\n",
    "elif month == 'July' and 31 > date > 22:\n",
    "    print('Leo')\n",
    "\n",
    "    #Aug\n",
    "elif month == 'Aug' and date <= 22:\n",
    "    print('Leo')\n",
    "elif month == 'Aug' and 31 > date > 22:\n",
    "    print('Virgo')\n",
    "\n",
    "    #Sep\n",
    "elif month == 'Sep' and date <= 22:\n",
    "    print('Virgo')\n",
    "elif month == 'Sep' and 31 > date > 22:\n",
    "    print('Libra')\n",
    "\n",
    "    #Oct\n",
    "elif month == 'Oct' and date <= 22:\n",
    "    print('Libra')\n",
    "elif month == 'Oct' and 31 > date > 22:\n",
    "    print('Scorpio')\n",
    "\n",
    "    #Nov\n",
    "elif month == 'Nov' and date <= 21:\n",
    "    print('Scorpio')\n",
    "elif month == 'Nov' and 31 > date > 21:\n",
    "    print('Sagittarius')\n",
    "\n",
    "    #Dec\n",
    "elif month == 'Dec' and date <= 21:\n",
    "    print('Sagittarius')\n",
    "elif month == 'Dec' and 31 > date > 21:\n",
    "    print('Capricorn')\n",
    "\n",
    "    #Error\n",
    "else:\n",
    "    print('Please try again and select one of these months\\\n",
    "    Jan, Feb, Mar, Apr, May, June, July, Aug, Sep, Oct, Nov, Dec or check your date e.g. 1,2,3...31')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Задание 4**. Нужно разработать приложение для финансового планирования.\n",
    "Приложение учитывает сколько уходит на ипотеку, \"на жизнь\" и сколько нужно отложить на пенсию.\n",
    "Пользователь вводит:\n",
    "- заработанную плату в месяц.\n",
    "- сколько процентов от ЗП уходит на ипотеку.\n",
    "- сколько процентов от ЗП уходит \"на жизнь\".\n",
    "- сколько раз приходит премия в год.\n",
    "\n",
    "Остальная часть заработанной платы откладывается на пенсию.\n",
    "\n",
    "Также пользователю приходит премия в размере зарплаты, от которой половина уходит на отпуск, а вторая половина откладывается.\n",
    "\n",
    "Программа должна учитывать сколько премий было в год.\n",
    "\n",
    "Нужно вывести сколько денег тратит пользователь на ипотеку и сколько он накопит за год.\n",
    "\n",
    "Пример:\n",
    "\n",
    "Введите заработанную плату в месяц: 100000\n",
    "\n",
    "Введите сколько процентов уходит на ипотеку: 30\n",
    "\n",
    "Введите сколько процентов уходит на жизнь: 50\n",
    "\n",
    "Введите количество премий за год: 2\n",
    "\n",
    "Вывод:\n",
    "На ипотеку было потрачено: 360000 рублей\n",
    "Было накоплено: 340000 рублей"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Укажите свою зп в месяц в рублях 1000\n",
      "Сколько процентов от ЗП уходит на ипотеку? 2\n",
      "Сколько процентов от ЗП уходит на остальные вещи? 5\n",
      "Сколько раз приходит премия в год? 34\n",
      "На ипотеку было потрачено: 240.0 рублей Было накоплено: 28160.0 рублей\n"
     ]
    }
   ],
   "source": [
    "wages = int(input(\"Укажите свою зп в месяц в рублях \"))\n",
    "mortgage_costs = int(input(\"Сколько процентов от ЗП уходит на ипотеку? \"))\n",
    "other_costs = int(input(\"Сколько процентов от ЗП уходит на остальные вещи? \"))\n",
    "bonus_time = int(input(\"Сколько раз приходит премия в год? \"))\n",
    "\n",
    "bonus_amount = wages/2\n",
    "\n",
    "print(\"На ипотеку было потрачено:\", round(mortgage_costs/100 * wages * 12,0), \"рублей\",\n",
    "      \"Было накоплено:\",\n",
    "      round(12 * wages * (1 - (mortgage_costs + other_costs)/100) + bonus_time * bonus_amount,0), \"рублей\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
